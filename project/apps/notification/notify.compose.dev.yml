version: '3.9'
services:

  # Кролик
  typoteka.notify.rabbitmq:
    image: rabbitmq:3.11-management
    container_name: typoteka.notify.rabbitmq

    ports:
      - '1088:15672'
      - '5672:5672'

    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  # Почтовый сервис
  typoteka.notify.fakesmtp:
    image: gessnerfl/fake-smtp-server:2.2.0
    container_name: "typoteka.notify.fakesmtp"
    hostname: "typoteka.notify.fakesmtp"
    ports:
      - "8025:8025"
      - "1085:8080"

  # Монга
  typoteka.notify.mongodb:
      image: mongo:4.4
      container_name: typoteka.notify.mongodb

      environment:
        MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
        MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
        MONGO_INITDB_DATABASE: ${MONGO_DB}

      ports:
        - ${MONGO_PORT}:27017

      volumes:
        - typoteka.notify.mongodb:/data/db

      healthcheck:
        test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/typoteka-notify --quiet
        interval: 10s
        timeout: 10s
        retries: 5

  # Админка Монги (должен зависеть от контейнера монги и не стартовать вперед него!)
  typoteka.notify.mongodb.ui:
    image: mongo-express:1.0-20
    restart: always
    container_name: typoteka.notify.mongodb.ui

    ports:
      - 8086:8081

    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@typoteka.notify.mongodb:27017/

volumes:
  typoteka.notify.mongodb:

# 1) Обратите внимание на `docker-compose.dev.yml`. В нём мы воспользовались директивой `hostname`. Она позволяет задать определённое имя хоста для сервиса в контейнере Docker.

# По умолчанию Docker автоматически создаёт уникальное имя для каждого сервиса, используя формат `service_number`. Директива `hostname` позволяет задать определённое имя
# сервиса.

# 2) В качестве образа воспользуемся `rabbitmq:3.11-management`. Он включает сам RabbitMQ и веб-интерфейс для администрирования (об этом говорит "-management"). С помощью веб-интерфейса мы сможем просматривать очереди, создавать новые и выполнить многие другие действия, связанные с администрированием Rabbit.

# Обратите внимание на секцию `ports`. Наружу мы пробрасываем два порта `1088` (`15672`) и `5672` (`5672`). На первом доступен веб-интерфейс для администрирования (`http://localhost:1084`) (1088 же!), а на втором служба RabbitMQ. С ней установим соединение из сервиса `notify`.

# Также обратите внимание на секцию `healthcheck`. Проверять доступность Rabbit мы будем с помощью утилиты `rabbitmq-diagnostics`.

# 3) Пожалуй, отдельное внимание следует обратить на локальный порт. Служба MongoDB ожидает подключений на порт `27017`. До этого мы всегда мапили порт службы в контейнере на аналогичный локальный порт. В этот раз так поступить не можем.

# Локальный порт `27017` уже занят другим сервисом MongoDB. Поэтому сделаем проброс на `27020`.
